// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/google/wire"
	"go-template/internal/api"
	"go-template/internal/api/grpc"
	"go-template/internal/api/grpc/interceptor"
	"go-template/internal/api/grpc/v1/documents"
	"go-template/internal/api/http"
	"go-template/internal/api/http/v1"
	"go-template/internal/base"
	"go-template/internal/base/conf"
	"go-template/internal/base/logger"
	"go-template/internal/base/milvus"
	"go-template/internal/base/orm"
	"go-template/internal/base/redis"
	"go-template/internal/base/s3"
	"go-template/internal/base/server"
	"go-template/internal/batch"
	"go-template/internal/dao"
	"go-template/internal/router"
	"go-template/internal/services"
	"go-template/internal/services/auth"
	"go-template/internal/services/jwks"
	"go-template/internal/services/stream"
)

// Injectors from wire.go:

func CreateApp() (*base.Application, error) {
	config := conf.NewConfig()
	loggerLogger := logger.NewZapLogger(config)
	jwksJWKS := jwks.NewJWKS(config, loggerLogger)
	service := auth.NewService(config, jwksJWKS, loggerLogger)
	userController := v1.NewUserController(service)
	handlers := http.NewHandler(userController)
	middleware := http.NewMiddleware(config, loggerLogger, service)
	routerApi := router.NewApiRoute(handlers, middleware)
	swaggerRouter := router.NewSwaggerRoute()
	httpServer := server.NewHTTPServer(config, routerApi, swaggerRouter, middleware, loggerLogger)
	db := orm.NewGORM(config, loggerLogger)
	query := dao.NewQuery(db)
	handler := documents.NewHandler(query)
	interceptorAuth := interceptor.NewAuth(service, loggerLogger, config)
	interceptorLogger := interceptor.NewLogger(loggerLogger)
	grpcInterceptor := grpc.NewInterceptor(interceptorAuth, interceptorLogger)
	grpcHandlers := grpc.NewHandler(handler, grpcInterceptor)
	apiApi := api.NewApi(grpcHandlers, handlers)
	streamService := stream.NewService(config)
	servicesService := services.NewService(loggerLogger, jwksJWKS, service, streamService)
	redisRedis := redis.NewRedis(config)
	batchBatch := batch.NewBatch(loggerLogger)
	s3S3 := s3.NewS3(config)
	client := milvus.NewService(config, loggerLogger)
	application := base.NewApplication(config, httpServer, apiApi, loggerLogger, servicesService, redisRedis, batchBatch, s3S3, db, query, client)
	return application, nil
}

// wire.go:

var ProviderSet = wire.NewSet(conf.NewConfig, logger.NewZapLogger, orm.NewGORM, dao.NewQuery, redis.NewRedis, s3.NewS3, milvus.NewService, batch.NewBatch, services.Provide, api.Provide, router.Provide, server.NewHTTPServer, base.NewApplication)
