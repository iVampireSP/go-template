// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/google/wire"
	"go-template/internal/api/v1"
	"go-template/internal/base"
	"go-template/internal/base/conf"
	"go-template/internal/base/logger"
	"go-template/internal/base/orm"
	"go-template/internal/base/redis"
	"go-template/internal/base/s3"
	"go-template/internal/base/server"
	"go-template/internal/batch"
	"go-template/internal/dao"
	"go-template/internal/handler"
	"go-template/internal/handler/grpc"
	"go-template/internal/handler/grpc/documents"
	"go-template/internal/middleware"
	"go-template/internal/router"
	"go-template/internal/service"
	"go-template/internal/service/auth"
	"go-template/internal/service/jwks"
)

// Injectors from wire.go:

func CreateApp() (*base.Application, error) {
	loggerLogger := logger.NewZapLogger()
	config := conf.ProviderConfig(loggerLogger)
	jwksJWKS := jwks.NewJWKS(config, loggerLogger)
	authService := auth.NewAuthService(config, jwksJWKS, loggerLogger)
	userController := v1.NewUserController(authService)
	api := router.NewApiRoute(userController)
	swaggerRouter := router.NewSwaggerRoute()
	middlewareMiddleware := middleware.NewMiddleware(loggerLogger, authService)
	httpServer := server.NewHTTPServer(config, api, swaggerRouter, middlewareMiddleware)
	db := orm.NewGORM(config, loggerLogger)
	query := dao.NewQuery(db)
	documentService := documents.NewDocumentService(query)
	handlers := grpc.NewGrpcHandlers(documentService)
	handlerHandler := handler.NewHandler(handlers)
	serviceService := service.NewService(loggerLogger, jwksJWKS, authService)
	redisRedis := redis.NewRedis(config)
	batchBatch := batch.NewBatch(loggerLogger)
	s3S3 := s3.NewS3(config)
	application := base.NewApplication(config, httpServer, handlerHandler, loggerLogger, serviceService, middlewareMiddleware, redisRedis, batchBatch, s3S3, db, query)
	return application, nil
}

// wire.go:

var ProviderSet = wire.NewSet(conf.ProviderConfig, logger.NewZapLogger, orm.NewGORM, dao.NewQuery, redis.NewRedis, s3.NewS3, middleware.Provider, batch.NewBatch, service.Provider, v1.ProviderApiControllerSet, grpc.ProviderGrpcHandlerSet, grpc.NewGrpcHandlers, handler.NewHandler, router.ProviderSetRouter, server.NewHTTPServer, base.NewApplication)
