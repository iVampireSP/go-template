// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/google/wire"
	"go-template/internal/api"
	"go-template/internal/api/grpc"
	"go-template/internal/api/grpc/interceptor"
	"go-template/internal/api/grpc/v1/documents"
	"go-template/internal/batch"
	"go-template/internal/infra"
	"go-template/internal/infra/conf"
	"go-template/internal/infra/logger"
	"go-template/internal/infra/orm"
	"go-template/internal/infra/redis"
	"go-template/internal/infra/s3"
	"go-template/internal/services"
	"go-template/internal/services/auth"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func CreateApp() (*infra.Application, error) {
	config := conf.NewConfig()
	client := orm.NewEnt(config)
	handler := documents.NewHandler(client)
	loggerLogger := logger.NewZapLogger(config)
	service := auth.NewService(config, loggerLogger)
	interceptorAuth := interceptor.NewAuth(service, loggerLogger, config)
	interceptorLogger := interceptor.NewLogger(loggerLogger)
	grpcInterceptor := grpc.NewInterceptor(interceptorAuth, interceptorLogger)
	handlers := grpc.NewHandler(handler, grpcInterceptor)
	apiApi := api.NewApi(handlers)
	servicesService := services.NewService(loggerLogger, service)
	redisRedis := redis.NewRedis(config)
	batchBatch := batch.NewBatch(loggerLogger)
	s3S3 := s3.NewS3(config)
	db := orm.NewSqlDB(config)
	application := infra.NewApplication(config, apiApi, loggerLogger, servicesService, redisRedis, batchBatch, s3S3, client, db)
	return application, nil
}

// wire.go:

var ProviderSet = wire.NewSet(conf.NewConfig, logger.NewZapLogger, orm.ProviderSet, redis.NewRedis, s3.NewS3, batch.NewBatch, services.Provide, api.Provide, infra.NewApplication)
